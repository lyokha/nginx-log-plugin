# this nginx configuration file is for demonstration purpose only

user                    nobody;
worker_processes        4;

load_module             /var/lib/nginx/modules/ngx_log_plugin_module.so;

events {
    worker_connections  1024;
}

error_log               /tmp/nginx-test-error-g.log info;

http {
    default_type        application/octet-stream;
    sendfile            on;

    error_log           /tmp/nginx-test-error.log info;
    access_log          /tmp/nginx-test-access.log;

    haskell load        /var/lib/nginx/ngx_log.so;

    server {
        listen          8010;
        server_name     main;

        haskell_run logInfo !$msgG "Write in global log!";

        location / {
            haskell_run logInfoR <~$msg '$_r_ptr
                    Got query "$args"';

            if ($arg_a) {
                haskell_run logInfoR <~$msg '$_r_ptr
                        Got a = "$arg_a"';
            }

            haskell_run logInfoR !$msgR '$_r_ptr
                    Request finished';

            if ($arg_c) {
                rewrite ^ /rewr last;
            }

            echo Ok;
        }

        location /rewr {
            haskell_run logInfoR <~$msg '$_r_ptr
                    [In /rewr] Got query "$args"';

            if ($arg_a) {
                haskell_run logInfoR <~$msg '$_r_ptr
                        [In /rewr] Got a = "$arg_a"';
            }

            echo "In /rewr";
        }

        location /tee {
            haskell_async_content tee "$_r_ptr
                    Hello, world!";
        }

        location /log {
            log info 'Got query "$args"';

            if ($arg_a) {
                log info 'Got a = "$arg_a"';
            }

            log ultimate info 'Request finished';

            if ($arg_c) {
                rewrite ^ /rewr last;
            }

            echo Ok;
        }

# TYPICAL USE CASES AND GOTCHAS

# Log both outside-if and inside-if messages

        location /1 {
            haskell_run logInfoR <~$msg '$_r_ptr
                    Got query "$args"';

            if ($arg_a) {
                haskell_run logInfoR <~$msg '$_r_ptr
                        Got a = "$arg_a"';
            }

            echo "URI: $uri";
        }

# $ curl 'http://localhost:8010/1?a=1'
# URI: /1
# 2022/12/01 17:32:37 [info] 1513434#0: *1 Got query "a=1", client: 127.0.0.1, server: main, request: "GET /1?a=1 HTTP/1.1", host: "localhost:8010"
# 2022/12/01 17:32:37 [info] 1513434#0: *1 Got a = "1", client: 127.0.0.1, server: main, request: "GET /1?a=1 HTTP/1.1", host: "localhost:8010"


# Log both outside-if and inside-if messages (in reverse order)

        location /2 {
            haskell_run logInfoR !$msgR '$_r_ptr
                    Got query "$args"';

            if ($arg_a) {
                haskell_run logInfoR <~$msg '$_r_ptr
                        Got a = "$arg_a"';
            }

            echo "URI: $uri";
        }

# $ curl 'http://localhost:8010/2?a=1'
# URI: /2
# 2022/12/01 17:33:52 [info] 1513433#0: *2 Got a = "1", client: 127.0.0.1, server: main, request: "GET /2?a=1 HTTP/1.1", host: "localhost:8010"
# 2022/12/01 17:33:52 [info] 1513433#0: *2 Got query "a=1", client: 127.0.0.1, server: main, request: "GET /2?a=1 HTTP/1.1", host: "localhost:8010"


# Log only inside-if message when entering if clause

        location /3 {
            haskell_run logInfoR !$msgR '$_r_ptr
                    Got query "$args"';

            if ($arg_a) {
                haskell_run ! $msgR '';
                haskell_run logInfoR <~$msg '$_r_ptr
                        Got a = "$arg_a"';
            }

            echo "URI: $uri";
        }

# $ curl 'http://localhost:8010/3?a=1'
# URI: /3
# 2022/12/01 17:35:03 [info] 1513432#0: *3 Got a = "1", client: 127.0.0.1, server: main, request: "GET /3?a=1 HTTP/1.1", host: "localhost:8010"


# Log only if stacked rewrite directives did not alter straight logic flow

        haskell_run ! $true 1;

        location /4 {
            haskell_run logInfoR <~$msg '$_r_ptr
                    Got query "$args"';

            if ($arg_a) {
                haskell_run logInfoR <~$msg '$_r_ptr
                        Got a = "$arg_a"';
                echo "URI: $uri, got a";
                break;
            }

            if ($true) {
                haskell_run logInfoR <~$msg '$_r_ptr
                        Query did not contain a';
            }

            echo "URI: $uri";
        }

# $ curl 'http://localhost:8010/4?a=1'
# URI: /4, got a
# 2022/12/01 17:35:55 [info] 1513436#0: *4 Got query "a=1", client: 127.0.0.1, server: main, request: "GET /4?a=1 HTTP/1.1", host: "localhost:8010"
# 2022/12/01 17:35:55 [info] 1513436#0: *4 Got a = "1", client: 127.0.0.1, server: main, request: "GET /4?a=1 HTTP/1.1", host: "localhost:8010"
# $ curl 'http://localhost:8010/4'
# URI: /4
# 2022/12/01 17:37:12 [info] 1513434#0: *5 Got query "", client: 127.0.0.1, server: main, request: "GET /4 HTTP/1.1", host: "localhost:8010"
# 2022/12/01 17:37:12 [info] 1513434#0: *5 Query did not contain a, client: 127.0.0.1, server: main, request: "GET /4 HTTP/1.1", host: "localhost:8010"


# [GOTCHA] Log only outside-if message even when entering if clause

        location /5 {
            haskell_run logInfoR <!$msgR '$_r_ptr
                    Got query "$args"';

            if ($arg_a) {
                haskell_run logInfoR <!$msgR '$_r_ptr
                        Got a = "$arg_a"';
            }

            echo "URI: $uri";
        }

# $ curl 'http://localhost:8010/5?a=1'
# URI: /5
# 2022/12/01 17:38:59 [info] 1513434#0: *6 Got query "a=1", client: 127.0.0.1, server: main, request: "GET /5?a=1 HTTP/1.1", host: "localhost:8010"


# [GOTCHA] Log only message before rewrite

        location /6 {
            haskell_run logInfoR <!$msgR '$_r_ptr
                    Got query "$args"';
            rewrite ^ /7 last;
        }

        location /7 {
            haskell_run logInfoR <!$msgR '$_r_ptr
                    Got query (after rewrite) "$args"';

            echo "URI: $uri";
        }

# $ curl 'http://localhost:8010/6?a=1'
# URI: /7
# 2022/12/01 17:39:41 [info] 1513434#0: *7 Got query "a=1", client: 127.0.0.1, server: main, request: "GET /6?a=1 HTTP/1.1", host: "localhost:8010"

# In the two gotchas shown above, using strict volatile variables such as
# <~$msg would fix the unexpected behaviour


# [GOTCHA] No log when return from if clause

        location /8 {
            if ($arg_a) {
                haskell_run logInfoR <~$msg '$_r_ptr
                        Got a = "$arg_a"';
                return 200;
            }

            echo "URI: $uri";
        }

# $ curl 'http://localhost:8010/8?a=1'

# To fix logging in this case, use a late strict variable such as !$msgR (or
# directive log ultimate) instead

    }
}

# vim: ft=nginx
